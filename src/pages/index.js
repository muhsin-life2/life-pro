import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import Layout from 'components/layout'
import { useSession, getSession } from 'next-auth/react'
const inter = Inter({ subsets: ['latin'] })
import { getToken } from 'next-auth/jwt'
import { redirect } from 'next/dist/server/api-utils'

export default function Home({ data, brands_data, sessionServ }) {
  return (
    <>
      <Head>
        <title>Life Pharmacy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0, maximum-scale=1.0"></meta>
        <link rel="icon" href="/life-logo.jfif" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet" />
      </Head>
      <Layout data={data} brands_data={brands_data} sessionServ={sessionServ}>
        {/* <div class="font-bold text-center p-5 text-xl">Hello {session ? session.token.name : 'User'}</div> */}
        <main className={styles.main}>
        </main>
      </Layout>

    </>
  )
}

export async function getServerSideProps(context) {
  const res = await fetch("https://prodapp.lifepharmacy.com/api/categories");
  const data = await res.json();

  const brands_res = await fetch("https://prodapp.lifepharmacy.com/api/web/brands");
  const brands_data = await brands_res.json();

  //when session is available
  const session = await getSession(context);
  var userAddrData = {data:{
    addresses:[]
  }};
  if (session) {
    // console.log(session.token.token);
    // const userAddrheaders = { 'Authorization': `Bearer ${session.token.token}` };
    const userAddrheaderRes = await fetch('https://prodapp.lifepharmacy.com/api/user/addresses', {
      headers: {
        Authorization: `Bearer ${session.token.token}`
      }
    });
     userAddrData = await userAddrheaderRes.json();
    // console.log(userAddrData.data.addresses);
  }
  return {
    props: {
      data,
      brands_data,
      sessionServ: userAddrData.data.addresses
    }
  }
}
